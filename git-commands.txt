‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è Comandos ‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è‚å®Ô∏è

git init => inicializa um reposit√≥rio git no diret√≥rio atual

git status => mostra como est√° a √°rea de "stage"

git add <file-name> => adiciona o arquivo na staging area
git add . => adiciona todos os arquivos "unstaged" √† staging area
git rm --cached -r <file-name> =>remove o arquivo da staging area
git rm --cached -r . => remove todos os arquivos da staging area

git commit -m "<commit message>" => commita todas as mudan√ßas feitas e staged

git log => mostra as informa√ß√µes do commit, como quem fez, quando foi feito, o c√≥digo hash do commit e a commit message

git diff <file-name> => compara o arquivo atual com como ele estava em seu ultimo check point

git checkout <file-name> => volta o arquivo para a ultima vers√£o commitada no reposit√≥rio

git remote add origin <url-do-reposit√≥rio-rem√≥to> => fala ao reposit√≥rio local que foi criado um reposit√≥rio rem√≥to na internet e que quero transferir meus commits para l√°

git push -u <remote(normalmente origin)> <branch> => faz o upload do seu reposit√≥rio local ao reposit√≥rio rem√≥to

.gitignore:
	#blablabla => coment√°rio
	*.txt => marca todos os arquivos que terminam com .txt
	arquivo.extens√£o => marca esse arquivo para ser ignorado pelo git

git clone <url-do-reposit√≥rio-remoto> => cria um reposit√≥rio local baseado no reposit√≥rio remoto indicado

git branch <nome-da-branch> => cria uma nova branch no seu reposit√≥rio
git branch => mostra as branches do reposit√≥rio, o * indica em qual branch voc√™ est√°
git checkout <nome-da-branch> => muda para a branch indicada

git merge <nome-da-branch-a-ser-merged> => faz o merge de uma branch, abre o vim que te deixa adicionar uma mensagem ao merge, para salvar e sair do editor Vim digite <:q!>



üó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏è Terminologias üó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏èüó£Ô∏è

local repository => seu reposit√≥rio local, diret√≥rio que contem a pasta .git
remote reposit√≥ry => local onde voc√™ guarda e exp√µe seu reposit√≥rio e todas as suas vers√µes e branches para uma cominidade ou site, normalmente isso √© feito no Github, mas existem outras ferramentas como o Bitbucket, Phabricator, GitLab, entre outros

staging area => √°rea onde os arquivos est√£o sendo trakeados pelo git e ser√£o commitados ao reposit√≥rio

commit => salvar uma nova vers√£o com as altera√ß√µes que foram "staged", como se fosse um novo check point de um jogo

commit message => nome do check point, tente ser o mais explicito poss√≠vel para mais tarde, saber o que essas mudan√ßas fizeram com o projeto (Sempre escrever no presente)

origin => nome do remote repository, por convens√£o √© dado esse nome, mesmo podendo ser qualquer outro nome aleat√≥rio

brach => "galho" do seu projeto, sendo o "tronco" a master branch e as outras branchs os galhos que saem do tronco e de outros galhos, essas branchs podem ser juntadas ao tronco principal do seu projeto por meio de um merge

merge => junta dois branches

master branch =>principal segmento do seu reposit√≥rio, normalmente √© a vers√£o que est√° em produ√ß√£o, √© onde fica o seu progresso principal, √© considerado boa pr√°tica manter somente vers√µes est√°veis dos seus projetos. Ao criar novas funcionalidades a algum projeto, de preferencia para criar em alguma branch paralela, e somente quando essa nova funcionalidade estiver pronta e testada dar o merge dessa branch paralela na master

.gitignore => arquivo dentro do seu diret√≥rio que indica quais arquivos n√£o podem ser commitados para o versionamento(o ponto est√° ali pois √© um arquivo escondido)

https://github.com/github/gitignore => templates de gitignore's para v√°rios tipos de projetos feito pelo time do Github

README.md => arquivo que diz outras pessoas sobre o que √© o seu reposit√≥rio, ele √© formatado em linguagem de marca√ß√£o e normalmente √© usado como a documenta√ß√£o do seu projeto/reposit√≥rio

fork => copiar um reposit√≥rio do github de algu√©m para voc√™, criando uma vers√£o sua que pode alterar e tem total permiss√µes igual teria se fosse um criado por voc√™, inclusive pode clonar esse reposit√≥rio remoto para a m√°quina e altera-lo, caso queira tamb√©m √© poss√≠vel fazer um pull request para o reposit√≥rio original, um exemplo seria pegar o reposit√≥rio do kernel do Linux, alterar e criar uma feature interessante e pedir para a Linux Foundation adicionar essa feature sua na vers√£o oficial do sistema

pull request => pedido para dar merge de um fork de um reposit√≥rio para seu reposit√≥rio original, √© como fazer uma sugest√£o ao criador de um projeto de adicionar algo que voc√™ fez


Para treinar e ver mais comandos veja https://learngitbranching.js.org/
